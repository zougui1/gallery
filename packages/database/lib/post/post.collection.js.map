{"version":3,"file":"post.collection.js","sourceRoot":"","sources":["../../src/post/post.collection.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Aggregate, AggregateOptions, MongooseBaseQueryOptions, MongooseQueryOptions, MongooseUpdateQueryOptions, PipelineStage, ProjectionType, QueryOptions, RootFilterQuery, Types, UpdateQuery, UpdateWithAggregationPipeline, mongo } from 'mongoose';\n\nimport { type Connection } from 'mongoose';\nimport { type ReturnModelType } from '@typegoose/typegoose';\n\nimport {\n  fileSchema,\n  imageFileSchema,\n  textFileSchema,\n  postSchema,\n  type PostSchemaWithId,\n  type PostSchema,\n} from './post.schema';\nimport { Post } from './post.model';\nimport { getModel } from '../utils';\n\ntype LeanPost = Post & {\n  _id: Types.ObjectId;\n};\n\nexport class PostCollection {\n  readonly schema = {\n    file: fileSchema,\n    imageFile: imageFileSchema,\n    textFile: textFileSchema,\n    post: postSchema,\n  } as const;\n\n  readonly model: ReturnModelType<typeof Post>;\n\n  constructor(connection: Connection) {\n    this.model = getModel('posts', Post, {\n      connection,\n    });\n  }\n\n  createOne = async (data: PostSchema): Promise<PostSchemaWithId> => {\n    const document = await this.model.create(postSchema.parse(data));\n    return this.deserialize(document);\n  }\n\n  createMany = async (data: PostSchema[]): Promise<PostSchemaWithId[]> => {\n    const documents = await this.model.create(data.map(item => postSchema.parse(item)));\n    return documents.map(this.deserialize);\n  }\n\n  find = (filter?: RootFilterQuery<Post>, options?: QueryOptions<Post>) => {\n    return this.model\n      .find(filter ?? {}, {}, options)\n      .lean()\n      .transform(data => data.map(this.deserialize));\n  }\n\n  findById = (id: string, options?: QueryOptions<Post>) => {\n    return this.model\n      .findById(id, {}, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findByIdAndDelete = (id: string, options?: QueryOptions<Post>) => {\n    return this.model\n      .findByIdAndDelete(id, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findByIdAndUpdate = (id: string, update: UpdateQuery<Post>, options?: QueryOptions<Post>) => {\n    return this.model\n      .findByIdAndUpdate(id, update, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findOne = (filter: RootFilterQuery<Post>, options?: QueryOptions<Post>) => {\n    return this.model\n      .findOne(filter, {}, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findOneAndDelete = (filter: RootFilterQuery<Post>, options?: QueryOptions<Post>) => {\n    return this.model\n      .findOneAndDelete(filter, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findOneAndUpdate = (filter: RootFilterQuery<Post>, update: UpdateQuery<Post>, options?: QueryOptions<Post>) => {\n    return this.model\n      .findOneAndUpdate(filter, update, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  updateMany = (filter?: RootFilterQuery<Post>, update?: UpdateQuery<Post> | UpdateWithAggregationPipeline, options?: (mongo.UpdateOptions & MongooseUpdateQueryOptions<Post>)) => {\n    return this.model.updateMany(filter, update, options);\n  }\n\n  updateOne = (filter?: RootFilterQuery<Post>, update?: UpdateQuery<Post> | UpdateWithAggregationPipeline, options?: (mongo.UpdateOptions & MongooseUpdateQueryOptions<Post>)) => {\n    return this.model.updateOne(filter, update, options);\n  }\n\n  deleteMany = (filter?: RootFilterQuery<Post>, options?: (mongo.DeleteOptions & MongooseBaseQueryOptions<Post>)) => {\n    return this.model.deleteMany(filter, options);\n  }\n\n  deleteOne = (filter?: RootFilterQuery<Post>, options?: (mongo.DeleteOptions & MongooseBaseQueryOptions<Post>)) => {\n    return this.model.deleteOne(filter, options);\n  }\n\n  replaceOne = (filter?: RootFilterQuery<Post>, replacement?: Post, options?: (mongo.ReplaceOptions & MongooseQueryOptions<Post>)) => {\n    return this.model.replaceOne(filter, replacement, options);\n  }\n\n  aggregate = <R = unknown>(pipeline?: PipelineStage[], options?: AggregateOptions): Aggregate<R[]> => {\n    return this.model.aggregate(pipeline, options);\n  }\n\n  distinct = (field: string, filter?: RootFilterQuery<Post>, options?: QueryOptions) => {\n    return this.model.distinct(field, filter, options);\n  }\n\n  deserialize = (document: LeanPost): PostSchemaWithId => {\n    return {\n      ...postSchema.parse(document),\n      _id: document._id.toString(),\n    };\n  }\n}\n"]}