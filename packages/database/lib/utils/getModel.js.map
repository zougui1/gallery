{"version":3,"file":"getModel.js","sourceRoot":"","sources":["../../src/utils/getModel.ts"],"names":[],"mappings":";;;;;;AAAA,wDAAgC;AAChC,oDAA8E;AAGvE,MAAM,QAAQ,GAAG,CAAiC,cAAsB,EAAE,KAAQ,EAAE,OAAsB,EAAsB,EAAE;IACvI,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;QAC3C,uDAAuD;QACvD,OAAO,kBAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IACzC,CAAC;IAED,OAAO,IAAA,4BAAgB,EAAC,KAAK,EAAE;QAC7B,kBAAkB,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU;QACvC,OAAO,kCACF,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,KACnB,UAAU,EAAE,cAAc,GAC3B;KACF,CAAC,CAAC;AACL,CAAC,CAAA;AAbY,QAAA,QAAQ,YAapB","sourcesContent":["import mongoose from 'mongoose';\nimport { getModelForClass, type ReturnModelType } from '@typegoose/typegoose';\nimport type { Constructor } from 'type-fest';\n\nexport const getModel = <T extends Constructor<unknown>>(collectionName: string, model: T, options?: ModelOptions): ReturnModelType<T> => {\n  if (process.env.NODE_ENV === 'development') {\n    // make sure the model is always up to date in dev mode\n    delete mongoose.models[collectionName];\n  }\n\n  return getModelForClass(model, {\n    existingConnection: options?.connection,\n    options: {\n      ...options?.options,\n      customName: collectionName,\n    },\n  });\n}\n\nexport interface ModelOptions {\n  connection?: mongoose.Connection;\n  options?: {\n    disableCaching?: boolean;\n  };\n}\n"]}