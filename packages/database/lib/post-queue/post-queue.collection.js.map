{"version":3,"file":"post-queue.collection.js","sourceRoot":"","sources":["../../src/post-queue/post-queue.collection.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Aggregate, AggregateOptions, MongooseBaseQueryOptions, MongooseQueryOptions, MongooseUpdateQueryOptions, PipelineStage, ProjectionType, QueryOptions, RootFilterQuery, Types, UpdateQuery, UpdateWithAggregationPipeline, mongo } from 'mongoose';\n\nimport { type Connection } from 'mongoose';\nimport { type ReturnModelType } from '@typegoose/typegoose';\n\nimport {\n  postQueueSchema,\n  type PostQueueSchema,\n  type PostQueueSchemaWithId,\n} from './post-queue.schema';\nimport { PostQueue } from './post-queue.model';\nimport { getModel } from '../utils';\n\ntype LeanPostQueue = PostQueue & {\n  _id: Types.ObjectId;\n};\n\nexport class PostQueueCollection {\n  readonly schema = {\n    postQueue: postQueueSchema,\n  } as const;\n\n  readonly model: ReturnModelType<typeof PostQueue>;\n\n  constructor(connection: Connection) {\n    this.model = getModel('post-queues', PostQueue, {\n      connection,\n    });\n  }\n\n  createOne = async (data: PostQueueSchema): Promise<PostQueueSchemaWithId> => {\n    const document = await this.model.create(postQueueSchema.parse(data));\n    return this.deserialize(document);\n  }\n\n  createMany = async (data: PostQueueSchema[]): Promise<PostQueueSchemaWithId[]> => {\n    const documents = await this.model.create(data.map(item => postQueueSchema.parse(item)));\n    return documents.map(this.deserialize);\n  }\n\n  find = (filter?: RootFilterQuery<PostQueue>, options?: QueryOptions<PostQueue>) => {\n    return this.model\n      .find(filter ?? {}, {}, options)\n      .lean()\n      .transform(data => data.map(this.deserialize));\n  }\n\n  findById = (id: string, options?: QueryOptions<PostQueue>) => {\n    return this.model\n      .findById(id, {}, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findByIdAndDelete = (id: string, options?: QueryOptions<PostQueue>) => {\n    return this.model\n      .findByIdAndDelete(id, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findByIdAndUpdate = (id: string, update: UpdateQuery<PostQueue>, options?: QueryOptions<PostQueue>) => {\n    return this.model\n      .findByIdAndUpdate(id, update, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findOne = (filter: RootFilterQuery<PostQueue>, options?: QueryOptions<PostQueue>) => {\n    return this.model\n      .findOne(filter, {}, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findOneAndDelete = (filter: RootFilterQuery<PostQueue>, options?: QueryOptions<PostQueue>) => {\n    return this.model\n      .findOneAndDelete(filter, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  findOneAndUpdate = (filter: RootFilterQuery<PostQueue>, update: UpdateQuery<PostQueue>, options?: QueryOptions<PostQueue>) => {\n    return this.model\n      .findOneAndUpdate(filter, update, options)\n      .transform(data => data ? this.deserialize(data) : data);\n  }\n\n  updateMany = (filter?: RootFilterQuery<PostQueue>, update?: UpdateQuery<PostQueue> | UpdateWithAggregationPipeline, options?: (mongo.UpdateOptions & MongooseUpdateQueryOptions<PostQueue>)) => {\n    return this.model.updateMany(filter, update, options);\n  }\n\n  updateOne = (filter?: RootFilterQuery<PostQueue>, update?: UpdateQuery<PostQueue> | UpdateWithAggregationPipeline, options?: (mongo.UpdateOptions & MongooseUpdateQueryOptions<PostQueue>)) => {\n    return this.model.updateOne(filter, update, options);\n  }\n\n  deleteMany = (filter?: RootFilterQuery<PostQueue>, options?: (mongo.DeleteOptions & MongooseBaseQueryOptions<PostQueue>)) => {\n    return this.model.deleteMany(filter, options);\n  }\n\n  deleteOne = (filter?: RootFilterQuery<PostQueue>, options?: (mongo.DeleteOptions & MongooseBaseQueryOptions<PostQueue>)) => {\n    return this.model.deleteOne(filter, options);\n  }\n\n  replaceOne = (filter?: RootFilterQuery<PostQueue>, replacement?: PostQueue, options?: (mongo.ReplaceOptions & MongooseQueryOptions<PostQueue>)) => {\n    return this.model.replaceOne(filter, replacement, options);\n  }\n\n  aggregate = <R = unknown>(pipeline?: PipelineStage[], options?: AggregateOptions): Aggregate<R[]> => {\n    return this.model.aggregate(pipeline, options);\n  }\n\n  distinct = (field: string, filter?: RootFilterQuery<PostQueue>, options?: QueryOptions) => {\n    return this.model.distinct(field, filter, options);\n  }\n\n  deserialize = (document: LeanPostQueue): PostQueueSchemaWithId => {\n    return {\n      ...postQueueSchema.parse(document),\n      _id: document._id.toString(),\n    };\n  }\n}\n"]}