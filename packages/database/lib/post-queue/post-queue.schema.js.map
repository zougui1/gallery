{"version":3,"file":"post-queue.schema.js","sourceRoot":"","sources":["../../src/post-queue/post-queue.schema.ts"],"names":[],"mappings":";;;AAAA,6BAAwB;AACxB,mCAAgC;AAEhC,yDAAoF;AACpF,yDAAyE;AAIzE,MAAM,IAAI,GAAG,OAAC,CAAC,MAAM,CAAC;IACpB,MAAM,EAAE,OAAC,CAAC,IAAI,CAAC,qCAAqB,CAAC;IACrC,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC9B,IAAI,EAAE,OAAC,CAAC,IAAI,EAAE;IACd,SAAS,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;CAC1C,CAAC,CAAC;AAEU,QAAA,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IACtC,SAAS,EAAE,OAAC,CAAC,IAAI,EAAE;IACnB,GAAG,EAAE,OAAC,CAAC,UAAU,CACf,kCAAkB,EAClB,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,4BAAY,CAAC,CACzC;IACD,aAAa,EAAE,OAAC,CAAC,UAAU,CACzB,kCAAkB,EAClB,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAA,4BAAY,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC5E;IACD,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC;QACf,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QACrB,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,oCAAoB,CAAC;QAClC,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QACvB,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAClC,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;QACrC,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;KACnC,CAAC,CAAC,QAAQ,EAAE;IAEb,GAAG,EAAE,OAAC,CAAC,MAAM,CAAC;QACZ,EAAE,EAAE,OAAC,CAAC,UAAU,CAAC,kCAAkB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC;QAChD,KAAK,EAAE,OAAC,CAAC,UAAU,CAAC,kCAAkB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC;KACpD,CAAC,CAAC,QAAQ,EAAE;IACZ,KAAK,EAAE,OAAC,CAAC,UAAU,CAAC,kCAAkB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACxE,QAAQ,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC;IAC5E,WAAW,EAAE,OAAC,CAAC,UAAU,CAAC,kCAAkB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC;IACpE,KAAK,EAAE,OAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IAChC,SAAS,EAAE,OAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;CAC/B,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\nimport { unique } from 'radash';\n\nimport { postQueueStatusValues, postSeriesTypeValues } from '@zougui/gallery.enums';\nimport { normalizeUrl, nullifyEmptyString } from '@zougui/gallery.utils';\n\nimport type { WithId } from '../types';\n\nconst step = z.object({\n  status: z.enum(postQueueStatusValues),\n  message: z.string().optional(),\n  date: z.date(),\n  errorList: z.array(z.string()).optional(),\n});\n\nexport const postQueueSchema = z.object({\n  createdAt: z.date(),\n  url: z.preprocess(\n    nullifyEmptyString,\n    z.string().url().transform(normalizeUrl),\n  ),\n  attachmentUrl: z.preprocess(\n    nullifyEmptyString,\n    z.string().url().optional().transform(url => url ? normalizeUrl(url) : url),\n  ),\n  series: z.object({\n    id: z.string().min(1),\n    type: z.enum(postSeriesTypeValues),\n    name: z.string().min(1),\n    chapterName: z.string().optional(),\n    chapterIndex: z.number().min(1).int(),\n    partIndex: z.number().min(1).int(),\n  }).optional(),\n\n  alt: z.object({\n    id: z.preprocess(nullifyEmptyString, z.string()),\n    label: z.preprocess(nullifyEmptyString, z.string()),\n  }).optional()\n,  title: z.preprocess(nullifyEmptyString, z.string().default('Untitled')),\n  keywords: z.array(z.string().min(1)).transform(keywords => unique(keywords)),\n  description: z.preprocess(nullifyEmptyString, z.string().optional()),\n  steps: z.array(step).default([]),\n  deletedAt: z.date().optional(),\n});\n\nexport type PostQueueSchema = z.infer<typeof postQueueSchema>;\nexport type PostQueueStepSchema = z.infer<typeof step>;\nexport type PostQueueSchemaWithId = WithId<PostQueueSchema>;\n"]}